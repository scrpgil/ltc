// Code generated by go-bindata.
// sources:
// default/default.json
// default/hls_high.json
// default/hls_low.json
// default/hls_medium.json
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultDefaultJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\x4f\x6b\x83\x40\x10\xc5\xef\x7e\x8a\x65\x8e\xc5\x5b\x7b\xda\x73\x29\x2d\x96\x56\xe8\xb1\x48\x91\x3a\xc4\x85\x5d\x57\xf6\x4f\x12\x09\x7e\xf7\xb0\xe3\xe2\x9f\x44\x24\x07\x6f\x3a\xef\xf1\x7e\xe3\x3c\x2f\x09\x63\x8c\xc1\x47\xd3\x7a\x07\x7c\x78\xa3\xc9\xab\x30\xf8\xef\xb4\xe9\x80\x83\x20\x35\x9d\xc4\x37\x21\xf1\xab\x54\x08\x1c\x9e\x16\x73\x6d\x54\xe9\x80\x83\x6a\x5f\x80\xc6\xfd\xa0\xc2\xb7\x77\xad\x77\x16\xf8\xef\xe8\x9e\x60\xe4\xc8\x30\xa0\x6a\x71\xa8\x67\x89\x77\xab\x68\xca\xb9\x75\xe4\x06\x2d\xba\xb0\x55\x88\x90\xf6\x8f\x62\x46\x4f\x9f\x6e\x43\x15\x56\xc2\xab\x1d\xb0\x31\xe8\x61\xb0\xd4\xa7\x1d\xa8\x21\x65\x42\xd2\x53\x11\xcf\x9e\xcb\xb2\x93\xc2\x86\xc3\xcf\xba\x8d\xd5\x89\xa6\xc2\xf3\x6a\x7d\xef\x9f\x3f\xc7\xe7\xb9\xb2\xb9\x55\x2c\x37\xc3\x6e\xd1\x2f\x49\x6b\x7d\xae\x9f\x7b\xf1\x15\xc5\xf0\xf3\x24\x7d\x72\x0d\x00\x00\xff\xff\xe4\x4b\xfc\x9c\xa1\x02\x00\x00")

func defaultDefaultJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultDefaultJson,
		"default/default.json",
	)
}

func defaultDefaultJson() (*asset, error) {
	bytes, err := defaultDefaultJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default/default.json", size: 673, mode: os.FileMode(420), modTime: time.Unix(1495782208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultHls_highJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x72\x4a\xcc\x4b\x29\xcf\x4c\x29\xc9\x50\xb2\x52\x50\x32\xb4\xb0\x30\x36\x30\x30\x50\xd2\x81\xc8\x05\x14\xe5\xa7\x65\xe6\xa4\x86\x81\xa4\x92\x12\x8b\x53\x73\x32\xf3\x52\x61\x72\x3e\xa9\x65\xa9\x39\x20\x09\x63\x3d\xb8\xfa\xe0\xcc\xaa\x54\xb0\x31\x46\x16\x06\x15\xe6\x16\x08\xf1\x92\xc4\xa2\x12\xbf\xd2\xdc\xa4\xd4\x22\x90\x34\x5c\xdc\x23\xa7\x38\x24\x33\x17\xa2\x05\x59\xd0\x27\xb3\xb8\x04\x66\x16\x5c\xdc\x2d\xbf\x28\x37\xb1\x04\x24\x94\x91\x53\xac\xc4\x55\xcb\x05\x08\x00\x00\xff\xff\x73\xe2\x80\x8b\xc1\x00\x00\x00")

func defaultHls_highJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultHls_highJson,
		"default/hls_high.json",
	)
}

func defaultHls_highJson() (*asset, error) {
	bytes, err := defaultHls_highJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default/hls_high.json", size: 193, mode: os.FileMode(420), modTime: time.Unix(1494239209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultHls_lowJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x72\x4a\xcc\x4b\x29\xcf\x4c\x29\xc9\x50\xb2\x52\x50\x32\x31\xb5\x30\x30\x30\x50\xd2\x81\x48\x05\x14\xe5\xa7\x65\xe6\xa4\x86\x81\x64\x92\x12\x8b\x53\x73\x32\xf3\x52\x61\x72\x3e\xa9\x65\xa9\x39\x20\x09\x63\x3d\xb8\xfa\xe0\xcc\xaa\x54\xb0\x90\x91\x41\x85\x91\x09\x42\xb8\x24\xb1\xa8\xc4\xaf\x34\x37\x29\xb5\x08\x24\x0b\x17\xf7\xc8\x29\x0e\xc9\xcc\x05\xeb\x30\x44\x16\xf4\xc9\x2c\x2e\x81\x19\x05\x17\x77\xcb\x2f\xca\x4d\x2c\x01\x09\x65\xe4\x14\x2b\x71\xd5\x72\x01\x02\x00\x00\xff\xff\x23\x48\xa3\xef\xbf\x00\x00\x00")

func defaultHls_lowJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultHls_lowJson,
		"default/hls_low.json",
	)
}

func defaultHls_lowJson() (*asset, error) {
	bytes, err := defaultHls_lowJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default/hls_low.json", size: 191, mode: os.FileMode(420), modTime: time.Unix(1494239248, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defaultHls_mediumJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x72\x4a\xcc\x4b\x29\xcf\x4c\x29\xc9\x50\xb2\x52\x50\x32\x34\xb0\x30\x36\x30\x30\x50\xd2\x81\xc8\x05\x14\xe5\xa7\x65\xe6\xa4\x86\x81\xa4\x92\x12\x8b\x53\x73\x32\xf3\x52\x61\x72\x3e\xa9\x65\xa9\x39\x20\x09\x63\x3d\xb8\xfa\xe0\xcc\xaa\x54\x90\x90\x99\x89\x41\x85\xb1\x19\x42\xb8\x24\xb1\xa8\xc4\xaf\x34\x37\x29\xb5\x08\x24\x0b\x17\xf7\xc8\x29\x0e\xc9\xcc\x4d\x85\x58\x8c\x24\xe8\x93\x59\x5c\x02\x33\x0a\x2e\xee\x96\x5f\x94\x9b\x58\x02\x12\xca\xc8\x29\x56\xe2\xaa\xe5\x02\x04\x00\x00\xff\xff\x31\x2a\x1d\xc0\xc0\x00\x00\x00")

func defaultHls_mediumJsonBytes() ([]byte, error) {
	return bindataRead(
		_defaultHls_mediumJson,
		"default/hls_medium.json",
	)
}

func defaultHls_mediumJson() (*asset, error) {
	bytes, err := defaultHls_mediumJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default/hls_medium.json", size: 192, mode: os.FileMode(420), modTime: time.Unix(1494239251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default/default.json":    defaultDefaultJson,
	"default/hls_high.json":   defaultHls_highJson,
	"default/hls_low.json":    defaultHls_lowJson,
	"default/hls_medium.json": defaultHls_mediumJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default": &bintree{nil, map[string]*bintree{
		"default.json":    &bintree{defaultDefaultJson, map[string]*bintree{}},
		"hls_high.json":   &bintree{defaultHls_highJson, map[string]*bintree{}},
		"hls_low.json":    &bintree{defaultHls_lowJson, map[string]*bintree{}},
		"hls_medium.json": &bintree{defaultHls_mediumJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
